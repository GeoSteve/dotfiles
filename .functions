# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

# list internal IP address
function myip() {
    ifconfig | grep 'inet 192'
}

# find shorthand
function f() {
    find . -name "$1"
}

function dash() {
    # if you have Dash Documentation Tool installed (http://kapeli.com/dash)
    # example: dash backbone model.save
    open dash://$1:$2
}

function tc-start() {
    /Library/Tomcat/bin/startup.sh
}

function tc-stop() {
    /Library/Tomcat/bin/shutdown.sh
}

function cattail() {
    tail -f /Library/tomcat/logs/catalina.out
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}

# show all terminal colors based on 256 tput setaf
tcolor() {
	( x=`tput op` y=`printf %$((${COLUMNS}-6))s`;for i in {0..256};do o=00$i;echo -e ${o:${#o}-3:3} `tput setaf $i;tput setab $i`${y// /=}$x;done; )
}

wtf() {
	say What the FUCK!
}

# lets toss an image onto my server and pbcopy that bitch.
function scpp() {
    scp "$1" aurgasm@aurgasm.us:~/paulirish.com/i;
    echo "http://paulirish.com/i/$1" | pbcopy;
    echo "Copied to clipboard: http://paulirish.com/i/$1"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8800}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# git log with per-commit cmd-clickable GitHub URLs (iTerm)
function gf() {
  local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
  [[ "$remote" ]] || return
  local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
  git log $* --name-status --color | awk "$(cat <<AWK
    /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
    /^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
    /.*/ {print \$0}
AWK
  )" | less -F
}


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}


# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}


# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}



# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}


# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

changeWorkspace() {
	if [ $# -eq 0 ]
		then
			cd /Developer # current popular project you are working on
    else
    	# common workspace (change 'Developer' to match your path) for project directories
    	cd /Developer/$1
    fi
}

gitclean() {
	git fetch -p origin

	DAYS=$1

	if [ "$DAYS" == "" ]; then
	  DAYS=7
	fi

	date --version > /dev/null 2>&1
	if [ $? == 0 ]; then
	  DATE=`date +%Y-%m-%d -d "-${DAYS}days"`
	else
	  DATE=`date  -v-${DAYS}d +%Y-%m-%d`
	fi

	REMOTE_BRANCHES=$(for k in `git branch -r --merged master | perl -pe 's/^..(.*?)( ->.*)?$/\1/'`; do echo -e `git log -1 --pretty=format:"%Cgreen%ci %Creset" --after="$DATE" $k -- | head -n 1`$k; done | sort -r | grep '^origin' | sed 's/ *origin\///')

	LOCAL_BRANCHES=$(for k in `git branch --merged master | perl -pe 's/^..(.*?)( ->.*)?$/\1/'`; do echo -e `git log -1 --pretty=format:"%Cgreen%ci %Creset" --after="$DATE" $k -- | head -n 1`$k; done | sort -r | grep '^origin')


	if [ "$REMOTE_BRANCHES" != "" ]; then

	  echo "The following remote branches are fully merged into master and older than $DAYS days and will be removed: $REMOTE_BRANCHES"

	  read -p "Continue (y/n)? "

	  if [ "$REPLY" == "y" ]; then
	  echo $REMOTE_BRANCHES | xargs git push origin --delete
	  echo "Done!, Obsolete branches are removed"
	  else
	  echo "Moving on...."
	  fi
	else
	  echo "No remote branches"
	fi

	if [ "$LOCAL_BRANCHES" != "" ]; then

	  echo "The following local branches are fully merged into master and older than $DAYS days and will be removed: $LOCAL_BRANCHES"

	  read -p "Continue (y/n)? "

	  if [ "$REPLY" == "y" ]; then
	  echo $LOCAL_BRANCHES | xargs git branch -r -d
	  echo "Done!, Obsolete branches are removed"
	  else
	  echo "Moving on...."
	  fi
	else
	  echo "No local branches"
	fi
}

function hideallfiles(){
    sudo defaults write com.apple.finder AppleShowAllFiles -bool NO
    killall Finder
}
function showallfiles(){
    sudo defaults write com.apple.finder AppleShowAllFiles -bool YES
    killall Finder
}

# One step function to launch development build for BEER
function beer-build() {
   # execute Gradle Build for Java Code
   gradle build &&
   # Copy the built WAR file to tomcat directory
   cp -f ./build/libs/beer-prototype.war /Library/Tomcat/webapps/ROOT.war &&
   # Connect to PostGres with a lame password of, "beer"
   export PGPASSWORD=beer &&
   # Drop old tables and recreate
   psql -U beer --command 'drop schema public cascade; create schema public;' &&
   # Load Seed Data, since above command dropped old tables
   gradle seedDb
}

# get github user's email via username
function github-email(){
	~/bin/github-email $1
}

# direct native use of osx built in notifications
function notify(){
	osascript -e "display notification \"$1\" with title \"$2\" subtitle \"$3\""
}

# Sample use case for Alerter (a default osx notification wrapper) - https://github.com/vjeantet/alerter
function alertify(){
	ANSWER="$(~/bin/alerter -message 'Start now ?' -closeLabel No -actions Yes,Maybe,'Remind me later...' -timeout 10)"
	case $ANSWER in
	    "@TIMEOUT") echo "Timeout man, sorry" ;;
	    "@CLOSED") echo "You clicked on the default alert close button" ;;
	    "@CONTENTCLICKED") echo "You clicked the alert's content !" ;;
	    "@ACTIONCLICKED") echo "You clicked the alert default action button" ;;
	    "Maybe") echo "Action MAYBE" ;;
	    "No") echo "Action NO" ;;
	    "Yes") echo "Action YES" ;;
	    **) echo "? --> $ANSWER" ;;
	esac
}

# shortcut to Alerter
function alerter(){
	~/bin/alerter $@
}

function findServiceByPort(){
  lsof -i TCP:$1
}
